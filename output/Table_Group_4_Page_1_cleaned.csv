python
import pandas as pd
import io

csv_data = """0,1,2,3,4,5,6,7,8,9
Academic Year,"No. of first year
students intake in the
year","No. of first year
students admitted in
the year",Academic Year,"No. of students
admitted through
Lateral entry",Academic Year,"No. of students
graduating in
minimum stipulated
time","No. of students
placed","Median salary of
placed
graduates(Amount in
Rs.)","No. of students
selected for Higher
Studies"
2017-18,142,163,2018-19,15,2021-22,160,157,"2000000(Twenty
Lakhs Only)",3
2018-19,168,193,2019-20,19,2022-23,199,187,"1850000(Eighteen
Lakh Fifty Thousand
Only)",12
2019-20,178,211,2020-21,12,2023-24,182,156,"1925000(Nineteen
Lakh Twenty Five
Thousand Only)",26
"""

# Read the CSV data, skipping the first row (index 0)
df = pd.read_csv(io.StringIO(csv_data), header=[0])

# Clean up column names by removing leading/trailing whitespace and newlines
df.columns = df.columns.str.strip().str.replace('\n', ' ')

# Initialize an empty list to store the unpivoted data
unpivoted_data = []

# Iterate over each row in the DataFrame
for index, row in df.iterrows():
    # Iterate over each column in the row
    for col_name, value in row.items():
        # Skip if the value is empty or null
        if pd.notna(value) and value != "":
            # Create a descriptive label
            description = f"{col_name} ({row.iloc[0]})" if col_name != 'Academic Year' else col_name

            # Handle specific cases for better descriptions
            if "students intake" in col_name:
                description = f"Number of first year students intake in the year ({row.iloc[0]})"
            elif "students admitted" in col_name:
                description = f"Number of first year students admitted in the year ({row.iloc[0]})"
            elif "Lateral entry" in col_name:
                description = f"Number of students admitted through Lateral entry ({row.iloc[3]})"
            elif "students graduating" in col_name:
                description = f"Number of students graduating in minimum stipulated time ({row.iloc[5]})"
            elif "students placed" in col_name:
                description = f"Number of students placed ({row.iloc[7]})"
            elif "Median salary" in col_name:
                description = f"Median salary of placed graduates (Amount in Rs.) ({row.iloc[8]})"
            elif "students selected for Higher Studies" in col_name:
                description = f"Number of students selected for Higher Studies ({row.iloc[9]})"

            # Add the description and value to the unpivoted data
            unpivoted_data.append({'Description': description, 'Value': value})

# Create a new DataFrame from the unpivoted data
unpivoted_df = pd.DataFrame(unpivoted_data)

# Display the unpivoted DataFrame
print(unpivoted_df.to_string(index=False))
```

**Explanation:**

1.  **Import Libraries:** Import `pandas` for data manipulation and `io` to read the string data as if it were a file.
2.  **Load CSV Data:** The provided CSV data is stored in a multiline string `csv_data`. `io.StringIO` treats this string as a file, and `pd.read_csv` reads it.
    *   `header=[0]` is crucial here. It tells pandas to use the first row (index 0) as the header. This is important because the first row contains "0,1,2,3,4,5,6,7,8,9", which are effectively column identifiers we'll use to construct our 'Description'. The actual descriptive headers are in the second row.
3.  **Clean Column Names:** The `df.columns.str.strip().str.replace('\n', ' ')` line cleans up the column names. It removes any leading/trailing whitespace and replaces newline characters within the column names with a space, making them more readable.
4.  **Iterate and Unpivot:**
    *   An empty list `unpivoted_data` is created to store the results.
    *   The code iterates through each `row` of the DataFrame `df` using `df.iterrows()`.
    *   For each `row`, it then iterates through each `col_name` and `value` pair.
    *   **Filtering Empty/Null Values:** `if pd.notna(value) and value != "":` ensures that only non-empty and non-null values are processed.
    *   **Constructing 'Description':**
        *   The core logic for creating the 'Description' is `f"{col_name} ({row.iloc[0]})" if col_name != 'Academic Year' else col_name`.
            *   If the `col_name` is not 'Academic Year', it combines the original column name (which is a cleaned version of the header text) with the `Academic Year` value from the *first column of that row* (`row.iloc[0]`). This assumes that the 'Academic Year' in the first column serves as the primary key for that row's data.
            *   If the `col_name` *is* 'Academic Year', it simply uses 'Academic Year' as the description.
        *   **Specific Case Handling:** The `elif` conditions provide more refined descriptions for specific column types (e.g., "No. of first year students intake"). This makes the 'Description' column much more informative. It uses the corresponding row value from the appropriate column to make the description more specific. For example, for "No. of students admitted through Lateral entry", it uses `row.iloc[3]` which is the 'Academic Year' associated with that lateral entry data.
    *   **Appending to List:** A dictionary containing the generated `description` and the `value` is appended to the `unpivoted_data` list.
5.  **Create New DataFrame:** `unpivoted_df = pd.DataFrame(unpivoted_data)` converts the list of dictionaries into a new pandas DataFrame with 'Description' and 'Value' columns.
6.  **Display Results:** `print(unpivoted_df.to_string(index=False))` prints the resulting DataFrame to the console without the DataFrame index.

This script effectively transforms the wide-format CSV data into a long-format (two-column) structure, creating descriptive labels by combining headers and row identifiers, and excluding any irrelevant or empty entries.